import React, { useState } from "react";
import "../ThrillaKeys/thrillakeys.css";
//import * as Tone from "tone";

let audioContext = new (window.AudioContext || window.webkitAudioContext)();
let oscList = [];
let mainGainNode = null;
let keyboard = document.querySelector(".keyboard");
let wavePicker = document.querySelector("select[name='waveform']");
let volumeControl = document.querySelector("input[name='volume']");
//let reverbControl = document.querySelector("input[name=reverb");
//let killButton = document.getElementById("kill-button");
//global variables for constructing waveforms
//*noteFreq will be an array of arrays; each array represents one octave,
//*each of which contains one entry for each note in that octave. The value for each
//* is the frequency, in Hertz, of the note's tone
let noteFreq = null;
//*customWaveform will be set up as a PeriodicWave describing the waveform to use when
//*the user selects "Custom" from the waveform picker.
let customWaveform = null;
//*sineTerms and cosineTerms will be used to store the data for generating the waveform;
//*each will contain an array that's generated when the user chooses "Custom".
let sineTerms = null;
let cosineTerms = null;

function createNoteTable() {
  let noteFreq = [];
  for (let i = 0; i < 9; i++) {
    noteFreq[i] = [];
  }

  noteFreq[0]["A"] = 27.5;
  noteFreq[0]["A#"] = 29.135235094880619;
  noteFreq[0]["B"] = 30.867706328507756;

  noteFreq[1]["C"] = 32.703195662574829;
  noteFreq[1]["C#"] = 34.647828872109012;
  noteFreq[1]["D"] = 36.708095989675945;
  noteFreq[1]["D#"] = 38.890872965260113;
  noteFreq[1]["E"] = 41.203444614108741;
  noteFreq[1]["F"] = 43.653528929125485;
  noteFreq[1]["F#"] = 46.249302838954299;
  noteFreq[1]["G"] = 48.999429497718661;
  noteFreq[1]["G#"] = 51.913087197493142;
  noteFreq[1]["A"] = 55.0;
  noteFreq[1]["A#"] = 58.27;
  noteFreq[1]["B"] = 61.74;
  noteFreq[2]["C"] = 65.41;
  noteFreq[2]["C#"] = 69.3;
  noteFreq[2]["D"] = 73.42;
  noteFreq[2]["D#"] = 77.78;
  noteFreq[2]["E"] = 82.41;
  noteFreq[2]["F"] = 87.31;
  noteFreq[2]["F#"] = 92.5;
  noteFreq[2]["G"] = 98.0;
  noteFreq[2]["G#"] = 103.8;
  noteFreq[2]["A"] = 110.0;
  noteFreq[2]["A#"] = 116.5;
  noteFreq[2]["B"] = 123.5;

  noteFreq[3]["C"] = 130.8;
  return noteFreq;
}

// builds keyboard and preps app to play music
//*component function
export default function ThrillaKeys() {
  const [volume, setVolume] = useState(0);
  const handleVolume = (e) => {
    setVolume(e.target.value);
  };
  noteFreq = createNoteTable();

  mainGainNode = audioContext.createGain();
  mainGainNode.connect(audioContext.destination);
  mainGainNode.gain.value = volume;

  // Create the keys; skip any that are sharp or flat; for
  // our purposes we don't need them. Each octave is inserted
  // into a <div> of class "octave".

  noteFreq.forEach(function (keys, idx) {
    let keyList = Object.entries(keys);
    let octaveElem = document.createElement("div");
    octaveElem.className = "octave";

    keyList.forEach(function (key) {
      if (key[0].length == 1) {
        octaveElem.appendChild(createKey(key[0], idx, key[1]));
      }
    });

    keyboard.appendChild(octaveElem);
  });

  //*keeps middle C in view
  // document.querySelector("div[data-note='B'][data-octave='5']")
  // .scrollIntoView(false);

  sineTerms = new Float32Array([0, 0, 1, 0, 1]);
  cosineTerms = new Float32Array(sineTerms.length);
  customWaveform = audioContext.createPeriodicWave(cosineTerms, sineTerms);

  for (let i = 0; i < 9; i++) {
    oscList[i] = {};
  }

  function createKey(note, octave, freq) {
    let keyElement = document.createElement("div");
    let labelElement = document.createElement("div");

    keyElement.className = "key";
    keyElement.dataset["octave"] = octave;
    keyElement.dataset["note"] = note;
    keyElement.dataset["frequency"] = freq;

    labelElement.innerHTML = note + "<sub>" + octave + "</sub>";
    keyElement.appendChild(labelElement);

    keyElement.addEventListener("mousedown", notePressed, false);
    keyElement.addEventListener("mouseup", noteReleased, false);
    keyElement.addEventListener("mouseover", notePressed, false);
    keyElement.addEventListener("mouseleave", noteReleased, false);

    return keyElement;
  }

  function playTone(freq) {
    let osc = audioContext.createOscillator();

    osc.connect(mainGainNode);

    let type = wavePicker.options[wavePicker.selectedIndex].value;

    if (type == "custom") {
      osc.setPeriodicWave(customWaveform);
    } else {
      osc.type = type;
    }

    osc.frequency.value = freq;
    osc.start();

    return osc;
  }

  function notePressed(event) {
    if (event.buttons & 1) {
      let dataset = event.target.dataset;

      if (!dataset["pressed"]) {
        let octave = +dataset["octave"];
        oscList[octave][dataset["note"]] = playTone(dataset["frequency"]);
        dataset["pressed"] = "yes";
      }
    }
  }

  function noteReleased(event) {
    let dataset = event.target.dataset;

    if (dataset && dataset["pressed"]) {
      let octave = +dataset["octave"];
      oscList[octave][dataset["note"]].stop();
      delete oscList[octave][dataset["note"]];
      delete dataset["pressed"];
    }
  }

  function changeVolume(event) {
    mainGainNode.gain.value = volumeControl.value;
  }
  return (
    <div className="ThrillaKeys">
      <div className="keyboard"></div>
      <div className="settingsBar">
        <div className="left">
          <span>Volume:</span>
          <input
            type="range"
            min="0.0"
            max="1.0"
            step="0.01"
            value=".5"
            list="volumes"
            name="volume"
            onChange="{"
          />
          <datalist id="volumes">
            <option value="0.0" label="Mute" />
            <option value="1.0" label="100%" />
          </datalist>
          <span> EFFECT </span>

          <input
            type="range"
            min="0.0"
            max="1.0"
            step="1.0"
            value="0.0"
            list="audioEffect"
            name="reverb"
          />
        </div>
        <div className="right">
          <span>Waveform</span>
          <select name="waveform">
            <option value="sine">Sine</option>
            <option value="square">Square</option>
            <option value="sawtooth">Sawtooth</option>
            <option value="triangle">Triangle</option>
            <option value="custom">Custom</option>
          </select>
        </div>
      </div>
      <button id="kill-button" onclick="killSwitch()">
        Kill Switch
      </button>
    </div>
  );
}

// function killSwitch() {
//   console.log("killswitch engaged!!!");
//   audioContext = new (window.AudioContext || window.webkitAudioContext)();
// }
